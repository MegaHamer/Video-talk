generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  output          = "src/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username      String     @unique
  email         String     @unique
  password_hash String
  avatar_url    String
  status        UserStatus

  sentFriendships     Friendship[] @relation("RequesterFriendship")
  receivedFriendships Friendship[] @relation("RecipientFriendship")

  messages   Message[]    @relation("SenderMessage")
  ChatMember ChatMember[] @relation("ChatMemberUser")
}

//Отношения
model Friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requester   User @relation("RequesterFriendship", fields: [requesterId], references: [id])
  requesterId Int
  recipient   User @relation("RecipientFriendship", fields: [recipientId], references: [id])
  recipientId Int

  status FriendshipStatus

  @@unique([requesterId, recipientId])
}

//чаты

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group_id Int?
  type     ChatType
  name     String

  messages Message[]    @relation("MessageChat")
  members  ChatMember[] @relation("ChatMemberChat")
}

model ChatMember {
  chat   Chat @relation("ChatMemberChat", fields: [chatId], references: [id], onDelete: Cascade)
  chatId Int
  user   User @relation("ChatMemberUser", fields: [userId], references: [id])
  userId Int

  visibleChat Boolean
  role ChatRole @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([chatId, userId])
}

//Cообщения
model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content  String
  sender   User   @relation("SenderMessage", fields: [senderId], references: [id])
  senderId Int
  chat     Chat   @relation("MessageChat", fields: [chatId], references: [id],onDelete: Cascade)
  chatId   Int

  reply     Message? @relation("ReplyMessage", fields: [replyToId], references: [id])
  replyToId Int?

  ReferencingMessages Message[] @relation("ReplyMessage")
}

//Серверы

enum ChatType {
  SERVER
  PRIVATE
  GROUP
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ServerRole {
  ADMIN
  MEMBER
}

enum ChatRole {
  OWNER
  MEMBER
}

enum UserStatus {
  ONLINE
  OFFLINE
  IDLE
  DND
}
