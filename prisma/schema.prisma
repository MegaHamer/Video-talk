generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  output          = "src/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  globalName    String     
  username      String     @unique
  email         String     @unique
  password_hash String
  avatar_url    String
  // status        UserStatus

  // sentRelationship     Relationship[] @relation("RequesterRelationship")
  // receivedRelationship Relationship[] @relation("RecipientRelationship")

  messages   Message[]    @relation("SenderMessage")
  // ChatMember ChatMember[] @relation("ChatMemberUser")
  ownedChats Chat[]       @relation("OwnerChat")
}

//Отношения
enum RelationType {
  REQUEST
  FRIEND
  BLOCK
}

// model Relationship {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   requester   User @relation("RequesterRelationship", fields: [requesterId], references: [id])
//   requesterId Int
//   recipient   User @relation("RecipientRelationship", fields: [recipientId], references: [id])
//   recipientId Int

//   type RelationType

//   @@unique([requesterId, recipientId])
// }

//чаты

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // name         String
  // passwordHash String?
  ownerId      Int
  owner        User    @relation("OwnerChat", fields: [ownerId], references: [id])

  // maxParticipants Int @default(10)

  messages Message[]    @relation("MessageChat")
  // members  ChatMember[] @relation("ChatMemberChat")
}

// model ChatMember {
//   chat   Chat @relation("ChatMemberChat", fields: [chatId], references: [id], onDelete: Cascade)
//   chatId Int
//   user   User @relation("ChatMemberUser", fields: [userId], references: [id])
//   userId Int

//   leftAt   DateTime?
//   isActive Boolean

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@id([chatId, userId])
// }

//Cообщения
model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content  String
  sender   User   @relation("SenderMessage", fields: [senderId], references: [id])
  senderId Int
  chat     Chat   @relation("MessageChat", fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String

  // reply     Message? @relation("ReplyMessage", fields: [replyToId], references: [id])
  // replyToId Int?

  // ReferencingMessages Message[] @relation("ReplyMessage")
}

//сессии

model Session {
  sid    String   @id @db.VarChar(255)
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@map("session")
}

//Серверы

enum ChatType {
  SERVER
  PRIVATE
  GROUP
}

enum ServerRole {
  ADMIN
  MEMBER
}

enum ChatRole {
  OWNER
  MEMBER
}

enum UserStatus {
  ONLINE
  OFFLINE
  IDLE
  DND
}
